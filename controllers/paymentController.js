const crypto = require("crypto");
const axios = require("axios");

const {
  Payment,
  Contractors,
  Payout,
  CONTRACTOR_TYPES,
  Members,
} = require("../models/models");
const ApiError = require("../error/ApiError");

const {
  TINKOFF_TERMINAL_KEY,
  TINKOFF_TERMINAL_KEY_E2C,
  BACKEND_URL,
  NODE_ENV,
  CLOUDPAYMENTS_PUBLIC_ID,
  CLOUDPAYMENTS_API_SECRET,
  CLOUDPAYMENTS_EMAIL_FROM,
} = process.env;
const TINKOFF_PASSWORD = "gP3PIYw*xe5L#$9G";

const TINKOFF_API_URL =
  NODE_ENV === "production"
    ? "https://securepay.tinkoff.ru"
    : "https://rest-api-test.tinkoff.ru";

function createTinkoffToken(payload, password = TINKOFF_PASSWORD) {
  const filtered = {};
  for (const key in payload) {
    if (
      typeof payload[key] !== "object" &&
      payload[key] !== undefined &&
      payload[key] !== null
    ) {
      filtered[key] = payload[key];
    }
  }

  filtered.Password = password;
  const sortedKeys = Object.keys(filtered).sort();
  const concatenated = sortedKeys.map((k) => String(filtered[k])).join("");
  return crypto.createHash("sha256").update(concatenated, "utf8").digest("hex");
}
class PaymentController {
  // üß© –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç—ë–∂–Ω–æ–π —Å—Å—ã–ª–∫–∏
  async init(req, res, next) {
    try {
      const {
        contractor,
        commission,
        companyAmount,
        contractorAmount,
        items,
        totalAmount,
      } = req.body;

      if (!contractor?.id) {
        return next(ApiError.badRequest("–ü–æ–¥—Ä—è–¥—á–∏–∫ –Ω–µ —É–∫–∞–∑–∞–Ω"));
      }

      const contractorRecord = await Contractors.findByPk(contractor.id);
      if (!contractorRecord) {
        return next(ApiError.badRequest("–ü–æ–¥—Ä—è–¥—á–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω"));
      }

      // –î–ª—è –°–ë–ü —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–¥—Ä—è–¥—á–∏–∫–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ (–Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è —Ñ–∏–∑–ª–∏—Ü)
      //   if (
      //     !contractorRecord.partnerId &&
      //     contractorRecord.type !== CONTRACTOR_TYPES.INDIVIDUAL
      //   ) {
      //     await this.registerContractor(contractorRecord);
      //     await contractorRecord.reload();
      //   }

      const cleanedPhone = contractorRecord.phone.replace(/[^\d+]/g, "");
      const orderId = `order-${Date.now()}`;
      const amountInKopecks = Math.round(totalAmount * 100);

      const payload = {
        TerminalKey: TINKOFF_TERMINAL_KEY,
        Amount: amountInKopecks,
        OrderId: orderId,
        Description: `–û–ø–ª–∞—Ç–∞ —É—Å–ª—É–≥: ${contractorRecord.name}${
          contractorRecord.inn ? ` (–ò–ù–ù ${contractorRecord.inn})` : ""
        }`,
        CreateDealWithType: "NN",
        PaymentRecipientId: cleanedPhone,
        NotificationURL: `${BACKEND_URL}/api/v1/payment/notification`,
        DATA: {
          Phone: cleanedPhone,
          Email: contractorRecord.email || "",
        },
      };

      payload.Token = createTinkoffToken(payload);

      console.log("[TINKOFF INIT] Request:", JSON.stringify(payload, null, 2));

      const response = await axios.post(`${TINKOFF_API_URL}/v2/Init`, payload, {
        headers: { "Content-Type": "application/json" },
      });

      const data = response.data;
      console.log("[TINKOFF INIT] Response:", JSON.stringify(data, null, 2));

      if (!data.Success) {
        console.error("[TINKOFF INIT ERROR]", data);
        return next(
          ApiError.badRequest(data.Message || "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞")
        );
      }

      await Payment.create({
        id: data.PaymentId,
        orderId,
        paymentUrl: data.PaymentURL,
        status: data.Status,
        contractorId: contractorRecord.id,
        commission,
        companyAmount,
        contractorAmount,
        totalAmount,
        items,
        responseData: data,
        dealId: data.SpAccumulationId || null,
        isConfirmed: false,
        isPaidOut: false,
      });

      return res.json({
        success: true,
        paymentUrl: data.PaymentURL,
        orderId,
        status: data.Status,
        paymentId: data.PaymentId,
        dealId: data.SpAccumulationId,
      });
    } catch (err) {
      console.error("[TINKOFF INIT ERROR]", err.response?.data || err.message);
      return next(ApiError.internal("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç—ë–∂–Ω–æ–π —Å—Å—ã–ª–∫–∏"));
    }
  }

  // üîî –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–æ–≤ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
  async notification(req, res, next) {
    try {
      const notification = { ...req.body };
      console.log(
        "[TINKOFF WEBHOOK] –ü–æ–ª—É—á–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:",
        JSON.stringify(notification, null, 2)
      );

      const receivedToken = notification.Token;
      delete notification.Token;
      const expectedToken = createTinkoffToken(notification);
      if (receivedToken !== expectedToken) {
        console.error("[TINKOFF WEBHOOK] –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω");
        return res.status(400).send("ERROR: Invalid token");
      }

      const { PaymentId, Status, SpAccumulationId, Success } = notification;
      if (!Success) {
        console.warn(
          `[TINKOFF WEBHOOK] –ò–≥–Ω–æ—Ä–∏—Ä—É—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å Success=false –¥–ª—è ${PaymentId}`
        );
        return res.send("OK");
      }

      const payment = await Payment.findByPk(PaymentId);
      if (!payment) {
        console.error("[TINKOFF WEBHOOK] –ü–ª–∞—Ç—ë–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω:", PaymentId);
        return res.status(404).send("ERROR: Payment not found");
      }

      const statusPriority = {
        NEW: 0,
        AUTHORIZED: 1,
        CONFIRMED: 2,
        REJECTED: 3,
        REFUNDED: 4,
        CANCELED: 5,
        PAYOUTS_COMPLETED: 6,
      };

      if (
        payment.responseData?.notifications?.some(
          (n) => n.Status === Status && n.PaymentId === PaymentId
        )
      ) {
        console.log(
          `[TINKOFF WEBHOOK] –î—É–±–ª–∏–∫–∞—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ${Status} –¥–ª—è ${PaymentId} ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É—é`
        );
        return res.send("OK");
      }

      // –∑–∞—â–∏—Ç–∞ –æ—Ç –æ—Ç–∫–∞—Ç–∞ —Å—Ç–∞—Ç—É—Å–∞
      const currentStatus = payment.status || "NEW";
      const newStatus = Status;
      if (statusPriority[newStatus] < statusPriority[currentStatus]) {
        console.log(
          `[TINKOFF WEBHOOK] –û–±–Ω–∞—Ä—É–∂–µ–Ω –≤–æ–∑–º–æ–∂–Ω—ã–π –æ—Ç–∫–∞—Ç ${currentStatus} ‚Üí ${newStatus} –¥–ª—è ${PaymentId}. –ü—Ä–æ–≤–µ—Ä—è—é —á–µ—Ä–µ–∑ GetState...`
        );
        const stateData = await controller.getState(PaymentId);
        console.log(stateData);
        console.log("=================");
        const verifiedStatus = stateData?.status;
        if (verifiedStatus) {
          console.log(
            `[CHECK STATE] Tinkoff –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å ${verifiedStatus} –¥–ª—è ${PaymentId}`
          );
          if (statusPriority[verifiedStatus] >= statusPriority[currentStatus]) {
            await payment.update({
              status: verifiedStatus,
              dealId: SpAccumulationId || payment.dealId,
              responseData: {
                ...payment.responseData,
                verifiedState: verifiedStatus,
                notifications: [
                  ...(payment.responseData?.notifications || []),
                  notification,
                ],
              },
            });
          } else {
            console.log(
              `[TINKOFF WEBHOOK] –û—Ç–∫–∞—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω –ª–æ–∫–∞–ª—å–Ω–æ ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É—é –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è ${PaymentId}`
            );
          }
        } else {
          console.warn(
            `[TINKOFF WEBHOOK] –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ GetState –¥–ª—è ${PaymentId} ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É—é –æ—Ç–∫–∞—Ç`
          );
        }
        return res.send("OK");
      }

      // –æ–±—ã—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
      await payment.update({
        status: newStatus,
        dealId: SpAccumulationId || payment.dealId,
        responseData: {
          ...payment.responseData,
          notifications: [
            ...(payment.responseData?.notifications || []),
            notification,
          ],
        },
        isConfirmed: payment.isConfirmed || newStatus === "CONFIRMED",
      });

      console.log(
        `[TINKOFF WEBHOOK] –ü–ª–∞—Ç—ë–∂ ${PaymentId} –æ–±–Ω–æ–≤–ª—ë–Ω –¥–æ —Å—Ç–∞—Ç—É—Å–∞: ${newStatus}`
      );

      if (newStatus === "AUTHORIZED") {
        try {
          await controller.confirmPayment(PaymentId);
        } catch (err) {
          console.error("[TINKOFF CONFIRM] –û—à–∏–±–∫–∞ –≤ confirmPayment:", err);
        }
      } else if (newStatus === "CONFIRMED") {
        try {
          await controller.executePayouts(PaymentId);
          await controller.sendFiscalReceipt(PaymentId)
        } catch (err) {
          console.error("[TINKOFF PAYOUTS] –û—à–∏–±–∫–∞ –≤ executePayouts:", err);
        }
      }

      return res.send("OK");
    } catch (err) {
      console.error("[TINKOFF WEBHOOK ERROR]", err);
      return res.status(500).send("ERROR");
    }
  }

  async sendFiscalReceipt(paymentId) {
    try {
      const payment = await Payment.findByPk(paymentId, {
        include: {
          model: Contractors,
          as: "contractor",
        },
      });
      // –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è (Basic Auth)
      const receipt = {
        Inn: "232910520874", // –ò–ù–ù —Ç–≤–æ–µ–≥–æ —é—Ä–ª–∏—Ü–∞
        Type: "Income", // –¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏: Income = –ø—Ä–∏—Ö–æ–¥
        CustomerReceipt: {
          Items: [
            {
              label: "–ö–æ–º–ø–∞–Ω–∏—é", // –æ–ø–∏—Å–∞–Ω–∏–µ —É—Å–ª—É–≥–∏
              price: payment.companyAmount,
              quantity: 1,
              amount: payment.companyAmount,
              vat: 0,
              method: 4,
              object: 4,
            },
            {
              label: "–ü–æ–¥—Ä—è–¥—á–∏–∫—É",
              price: payment.contractorAmount,
              quantity: 1,
              amount: payment.contractorAmount,
              vat: 0,
              method: 4,
              object: 4,
            },
          ],
          calculationPlace: "https://www.mbk.company",
          taxationSystem: 1, // 1 = –£–°–ù –î–æ—Ö–æ–¥
          email: payment.contractor.email, // –∫–æ–º—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ–∫
          phone: payment.contractor.phone.replace(/[^\d+]/g, ""),
          amounts: {
            electronic: payment.totalAmount,
            advancePayment: 0,
            credit: 0,
            provision: 0,
          },
        },
        InvoiceId: payment.id,
      };

      const auth = Buffer.from(
        `${CLOUDPAYMENTS_PUBLIC_ID}:${CLOUDPAYMENTS_API_SECRET}`
      ).toString("base64");

      // –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞
      const response = await axios.post(
        "https://api.cloudpayments.ru/kkt/receipt",
        receipt,
        {
          headers: {
            Authorization: `Basic ${auth}`,
            "Content-Type": "application/json",
          },
        }
      );

      console.log("‚úÖ –ß–µ–∫ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω:", response.data);
      return res.json(response.data);
    } catch (error) {
      console.error(
        "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —á–µ–∫–∞:",
        error.response?.data || error.message
      );
      return next(ApiError.badRequest("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —á–µ–∫–∞:", error));
    }
  }

  // ‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
  async confirmPayment(paymentId) {
    try {
      const payment = await Payment.findByPk(paymentId);
      if (!payment) throw ApiError.badRequest(`–ü–ª–∞—Ç–µ–∂ ${paymentId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);

      if (payment.isConfirmed) {
        console.log(`[TINKOFF CONFIRM] üí° –ü–ª–∞—Ç–µ–∂ ${paymentId} —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω`);
        return { success: true, alreadyConfirmed: true };
      }

      const payload = {
        TerminalKey: TINKOFF_TERMINAL_KEY,
        PaymentId: paymentId,
        Amount: Math.round(payment.totalAmount * 100),
      };
      payload.Token = createTinkoffToken(payload);

      const { data } = await axios.post(
        `${TINKOFF_API_URL}/v2/Confirm`,
        payload,
        {
          headers: { "Content-Type": "application/json" },
          timeout: 30000,
        }
      );

      if (!data.Success) {
        console.error("[TINKOFF CONFIRM ERROR] ‚ùå", data);
        throw ApiError.badRequest(
          data.Message || "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞"
        );
      }

      await payment.update({
        status: "CONFIRMED",
        isConfirmed: true,
        responseData: { ...payment.responseData, confirm: data },
      });

      console.log(
        `[TINKOFF CONFIRM] ‚úÖ –ü–ª–∞—Ç–µ–∂ ${paymentId} —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω`
      );

      // –í—ã–ø–ª–∞—Ç—ã
      try {
        await controller.executePayouts(paymentId);
        await controller.sendFiscalReceipt(paymentId);
      } catch (payoutErr) {
        console.error(
          `[TINKOFF PAYOUT ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–ª–∞—Ç–µ:`,
          payoutErr.message
        );
      }

      return { success: true, status: data.Status };
    } catch (err) {
      console.error(
        "[TINKOFF CONFIRM ERROR] üö®",
        err.response?.data || err.message
      );
      throw ApiError.internal("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞");
    }
  }

  // ‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—ã–ø–ª–∞—Ç
  async executePayouts(paymentId) {
    try {
      const payment = await Payment.findByPk(paymentId, {
        include: {
          model: Contractors,
          as: "contractor",
        },
      });

      if (!payment) {
        throw ApiError.badRequest(`–ü–ª–∞—Ç–µ–∂ —Å ID ${paymentId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      }

      if (payment.isPaidOut) {
        // console.log(`[TINKOFF PAYOUTS] üí° –ü–ª–∞—Ç–µ–∂ ${paymentId} —É–∂–µ –≤—ã–ø–ª–∞—á–µ–Ω`);
        return {
          success: true,
          alreadyPaidOut: true,
          message: `üí° –ü–ª–∞—Ç–µ–∂ ${paymentId} —É–∂–µ –≤—ã–ø–ª–∞—á–µ–Ω`,
        };
      }

      if (!payment.dealId) {
        throw ApiError.badRequest(
          `DealId –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞ ${paymentId}`
        );
      }

      const contractor = payment.contractor;
      if (!contractor) {
        throw ApiError.badRequest(
          `–ü–æ–¥—Ä—è–¥—á–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞ ${paymentId}`
        );
      }

      const partnerId = contractor.partnerId;

      if (
        !partnerId &&
        [
          CONTRACTOR_TYPES.IP,
          CONTRACTOR_TYPES.OOO,
          CONTRACTOR_TYPES.LEGAL_ENTITY,
        ].includes(contractor.type)
      ) {
        throw ApiError.badRequest(
          `PartnerId –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–ª—è –ø–æ–¥—Ä—è–¥—á–∏–∫–∞ ${contractor.id} (${contractor.type})`
        );
      }

      const results = { contractor: null, company: null };

      // –í—ã–ø–ª–∞—Ç–∞ –ø–æ–¥—Ä—è–¥—á–∏–∫—É
      if (payment.contractorAmount > 0) {
        try {
          const payoutPayload = {
            paymentId: payment.id,
            dealId: payment.dealId,
            amount: payment.contractorAmount,
            type: "contractor",
            finalPayout: true,
          };

          if (
            ![
              CONTRACTOR_TYPES.INDIVIDUAL,
              CONTRACTOR_TYPES.SELF_EMPLOYED,
            ].includes(contractor.type)
          ) {
            payoutPayload.partnerId = contractor.partnerId;
          }

          if (
            ![
              CONTRACTOR_TYPES.IP,
              CONTRACTOR_TYPES.OOO,
              CONTRACTOR_TYPES.LEGAL_ENTITY,
            ].includes(contractor.type)
          ) {
            // payoutPayload.memberId = "100000000012";
            // payoutPayload.phone = "79066589133";
            payoutPayload.memberId = contractor.memberId;
            payoutPayload.phone = contractor.phone?.replace(/\D/g, "");
          }

          results.contractor = await controller.sendPayout(payoutPayload);
        } catch (err) {
          console.error(
            `[TINKOFF PAYOUT ERROR] ‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–ª–∞—Ç—ã –ø–æ–¥—Ä—è–¥—á–∏–∫—É:`,
            err.message
          );
          throw ApiError.internal("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–ª–∞—Ç–µ –ø–æ–¥—Ä—è–¥—á–∏–∫—É");
        }
      }

      // // –í—ã–ø–ª–∞—Ç–∞ –∫–æ–º–ø–∞–Ω–∏–∏
      // if (payment.companyAmount > 0) {
      //   try {
      //     results.company = await this.sendPayout({
      //       paymentId: payment.id,
      //       dealId: payment.dealId,
      //       partnerId: COMPANY_PARTNER_ID,
      //       amount: payment.companyAmount,
      //       type: "company",
      //       finalPayout: true,
      //     });
      //     console.log(
      //       `[TINKOFF PAYOUT] ‚úÖ –í—ã–ø–ª–∞—Ç–∞ –∫–æ–º–ø–∞–Ω–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ (paymentId: ${paymentId})`
      //     );
      //   } catch (err) {
      //     console.error(
      //       `[TINKOFF PAYOUT ERROR] ‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–ª–∞—Ç—ã –∫–æ–º–ø–∞–Ω–∏–∏:`,
      //       err.message
      //     );
      //     throw ApiError.internal("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–ª–∞—Ç–µ –∫–æ–º–ø–∞–Ω–∏–∏");
      //   }
      // }

      let paymentMethod = "SBP"; // –ø–æ –¥–µ—Ñ–æ–ª—Ç—É

      if (contractor.partnerId) {
        paymentMethod = "–û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π";
      }

      await payment.update({
        isPaidOut: true,
        paymentMethod,
      });

      console.log(
        `[TINKOFF PAYOUTS] üéâ –í—Å–µ –≤—ã–ø–ª–∞—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞ ${paymentId}`
      );

      return { success: true, results };
    } catch (err) {
      console.error(
        `[TINKOFF PAYOUTS ERROR] üö®`,
        err.response?.data || err.message
      );
      throw ApiError.internal("–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –≤—ã–ø–ª–∞—Ç");
    }
  }

  // ‚úÖ –û—Ç–ø—Ä–∞–≤–∫–∞ –≤—ã–ø–ª–∞—Ç—ã
  async sendPayout({
    paymentId,
    dealId,
    partnerId,
    amount,
    type,
    phone,
    memberId,
    finalPayout = false,
  }) {
    try {
      if (!dealId || !amount) {
        throw ApiError.badRequest(
          "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –≤—ã–ø–ª–∞—Ç—ã"
        );
      }

      const amountInKopecks = Math.round(amount * 100);
      const orderId = `payout-${Date.now()}-${type || "unknown"}`;

      const payload = {
        TerminalKey: TINKOFF_TERMINAL_KEY_E2C,
        DealId: dealId,
        Amount: amountInKopecks,
        OrderId: orderId,
        PaymentRecipientId: "",
      };

      if (partnerId) payload.PartnerId = partnerId;
      if (phone) {
        payload.Phone = phone;
        payload.PaymentRecipientId = phone;
      }
      if (memberId) payload.SbpMemberId = memberId;

      if (finalPayout) payload.FinalPayout = true;
      payload.Token = createTinkoffToken(payload);

      console.log("[TINKOFF PAYOUT] üì§ –ó–∞–ø—Ä–æ—Å:", payload);

      const { data } = await axios.post(
        `${TINKOFF_API_URL}/e2c/v2/Init`,
        payload,
        {
          headers: { "Content-Type": "application/json" },
        }
      );

      console.log("[TINKOFF PAYOUT] üì• –û—Ç–≤–µ—Ç:", data);

      if (!data.Success) {
        console.error("[TINKOFF PAYOUT ERROR] ‚ùå", data);
        throw ApiError.badRequest(
          data.Message || "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –≤—ã–ø–ª–∞—Ç—ã"
        );
      }

      await Payout.create({
        id: data.PaymentId,
        dealId,
        partnerId,
        amount,
        status: data.Status,
        type,
        responseData: data,
      });

      console.log(
        `[TINKOFF PAYOUT] ‚úÖ –í—ã–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ (paymentId: ${paymentId}, type: ${type})`
      );

      if (partnerId) {
        try {
          await controller.getPayment(data.PaymentId);
          console.log(
            `[TINKOFF PAYOUT] ‚úÖ –í—ã–ø–ª–∞—Ç–∞ –ø–æ–¥—Ä—è–¥—á–∏–∫—É –∑–∞–≤–µ—Ä—à–µ–Ω–∞ (paymentId: ${data.PaymentId})`
          );
        } catch (err) {
          console.error(
            "[TINKOFF PAYOUT ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –≤—ã–ø–ª–∞—Ç—ã",
            err
          );
        }
      }

      return {
        success: true,
        payoutId: data.PaymentId,
        status: data.Status,
        amount: amountInKopecks / 100,
        finalPayout,
      };
    } catch (err) {
      console.error(
        "[TINKOFF PAYOUT ERROR] üö®",
        err.response?.data || err.message
      );
      throw ApiError.internal("–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤—ã–ø–ª–∞—Ç—ã");
    }
  }

  async getPayment(payoutId) {
    try {
      const payout = await Payout.findByPk(payoutId);

      if (payout.status == "COMPLETED" || payout.status == "REJECTED") {
        return {
          success: true,
          message: `üí° –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Å—É—â–µ—Å—Ç–≤–∏—Ç—å –≤—ã–ø–ª–∞—Ç—É ${payoutId}. –°–¥–µ–ª–∫–∞ –∑–∞–∫—Ä—ã—Ç–∞ —Å—Ç–∞—Ç—É—Å–æ–º ${payout.status}.`,
        };
      }

      const payload = {
        TerminalKey: TINKOFF_TERMINAL_KEY_E2C,
        PaymentId: payoutId,
      };
      payload.Token = createTinkoffToken(payload);
      console.log(payload);
      const { data } = await axios.post(
        `${TINKOFF_API_URL}/e2c/v2/Payment`,
        payload,
        {
          headers: { "Content-Type": "application/json" },
          timeout: 30000,
        }
      );

      console.log(data);

      if (!data.Success) {
        throw ApiError.badRequest(
          data.Message || "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø–∞–ª–Ω–µ–Ω–∏–∏ –∫–∞—Ä—Ç—ã"
        );
      }

      await Payout.update({
        status: data.Status,
        responseData: { ...payout.responseData, complated: { data } },
      });

      return data;
    } catch (err) {
      throw ApiError.internal("–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø–∞–ª–Ω–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã");
    }
  }

  // üìã –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
  async payment(req, res, next) {
    try {
      const { paymentId } = req.body;
      const payment = await controller.getPayment(paymentId);
      return res.json(payment);
    } catch (err) {
      console.error("[GET PAYMENT ERROR]", err);
      return next(ApiError.internal("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞"));
    }
  }

  // üìä –†—É—á–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
  async confirm(req, res, next) {
    try {
      const { paymentId } = req.body;
      console.log(paymentId);

      if (!paymentId) {
        return next(ApiError.badRequest("ID –ø–ª–∞—Ç–µ–∂–∞ –Ω–µ —É–∫–∞–∑–∞–Ω"));
      }

      await controller.confirmPayment(paymentId);

      return res.json({
        success: true,
        message: "–ü–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω",
      });
    } catch (err) {
      console.error("[CONFIRM ERROR]", err);
      return next(ApiError.internal("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞"));
    }
  }

  // üí∏ –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –≤—ã–ø–ª–∞—Ç
  async payout(req, res, next) {
    try {
      const { paymentId } = req.body;

      if (!paymentId) {
        return next(ApiError.badRequest("ID –ø–ª–∞—Ç–µ–∂–∞ –Ω–µ —É–∫–∞–∑–∞–Ω"));
      }

      const payout = await controller.executePayouts(paymentId);

      return res.json(payout);
    } catch (err) {
      console.error("[PAYOUT ERROR]", err);
      return next(ApiError.internal("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –≤—ã–ø–ª–∞—Ç"));
    }
  }

  // üìã –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞
  async getState(req, res, next) {
    try {
      const { paymentId, type } = req.params;

      if (!paymentId) {
        return next(ApiError.badRequest("ID –ø–ª–∞—Ç–µ–∂–∞ –Ω–µ —É–∫–∞–∑–∞–Ω"));
      }

      const payload = {
        TerminalKey: TINKOFF_TERMINAL_KEY,
        PaymentId: paymentId,
      };

      if (type === "payout") {
        payload.TerminalKey = TINKOFF_TERMINAL_KEY_E2C;
      }

      payload.Token = createTinkoffToken(payload);
      console.log(payload);

      const response = await axios.post(
        `${TINKOFF_API_URL}/v2/GetState`,
        payload,
        {
          headers: { "Content-Type": "application/json" },
          timeout: 30000,
        }
      );

      const data = response.data;

      if (!data.Success) {
        return next(
          ApiError.badRequest(data.Message || "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞")
        );
      }

      return res.json({
        success: true,
        status: data.Status,
        orderId: data.OrderId,
        amount: data.Amount / 100,
        details: data,
      });
    } catch (err) {
      console.error("[GET STATE ERROR]", err.response?.data || err.message);
      return next(ApiError.internal("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞"));
    }
  }

  async GetSbpMembers(req, res, next) {
    try {
      const payload = {
        TerminalKey: TINKOFF_TERMINAL_KEY,
      };

      payload.Token = createTinkoffToken(payload);

      const response = await axios.post(
        `${TINKOFF_API_URL}/a2c/sbp/GetSbpMembers`,
        payload,
        {
          headers: { "Content-Type": "application/json" },
          timeout: 30000,
        }
      );

      const data = response.data;

      if (!data.Success) {
        return next(ApiError.badRequest(data.Message));
      }

      for (const member of data.Members) {
        await Members.create({
          MemberId: member.MemberId,
          MemberName: member.MemberName,
          MemberNameRus: member.MemberNameRus,
        });
      }

      return res.json({ message: "–£—Å–ø–µ—à–Ω–æ" });
    } catch (err) {
      console.log(err);
      return next(
        ApiError.badRequest(
          "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ –±–∞–Ω–∫–æ–≤, —É—á–∞—Å—Ç–≤—É—é—â–∏—Ö –≤ –°–ë–ü."
        )
      );
    }
  }
  async getPaymentByOrderId(req, res, next) {
    try {
      const { orderId } = req.params;
      const payment = await Payment.findOne({ where: { orderId: orderId } });
      const payout = await Payout.findOne({
        where: { dealId: payment.dealId },
      });
      return res.json({ payout, payment });
    } catch (err) {
      console.error(err);
      ApiError.badRequest("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞");
    }
  }
}

module.exports = new PaymentController();
const controller = module.exports;
