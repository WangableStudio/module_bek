const crypto = require("crypto");
const axios = require("axios");
const { Payment, Contractors, Payout } = require("../models"); // –≤–∞—à–∏ –º–æ–¥–µ–ª–∏
const ApiError = require("../error/ApiError");

const TINKOFF_TERMINAL_KEY = "1759332525322";
const TINKOFF_TERMINAL_KEY_E2C = "1759332525322E2C"; // –¥–ª—è –≤—ã–ø–ª–∞—Ç
const TINKOFF_PASSWORD = "gP3PIYw*xe5L#$9G";

// ========================================
// üîê –ì–ï–ù–ï–†–ê–¶–ò–Ø –¢–û–ö–ï–ù–ê
// ========================================
function createTinkoffToken(payload, password) {
  const filtered = {};
  for (const key in payload) {
    // –ò—Å–∫–ª—é—á–∞–µ–º –æ–±—ä–µ–∫—Ç—ã (DATA, senderAccountInfo –∏ —Ç.–¥.) –∏–∑ —Ç–æ–∫–µ–Ω–∞
    if (typeof payload[key] !== "object") {
      filtered[key] = payload[key];
    }
  }
  filtered.Password = password;

  // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–ª—é—á–∞–º
  const sortedKeys = Object.keys(filtered).sort();

  // –ö–æ–Ω–∫–∞—Ç–µ–Ω–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
  const concatenated = sortedKeys.map((key) => String(filtered[key])).join("");

  console.log("[TOKEN] Concatenated string:", concatenated);

  // SHA-256
  const token = crypto
    .createHash("sha256")
    .update(concatenated, "utf8")
    .digest("hex");

  return token;
}

// ========================================
// üìù 1. –°–û–ó–î–ê–ù–ò–ï –ü–õ–ê–¢–ï–ñ–ù–û–ô –°–°–´–õ–ö–ò (Init)
// ========================================
async function paymentUrl(req, res, next) {
  try {
    const {
      contractor,
      commission,
      companyAmount,
      contractorAmount,
      items,
      totalAmount,
    } = req.body;

    if (!contractor?.id) {
      return next(ApiError.badRequest("–ü–æ–¥—Ä—è–¥—á–∏–∫ –Ω–µ —É–∫–∞–∑–∞–Ω"));
    }

    const contractorRecord = await Contractors.findByPk(contractor.id);
    if (!contractorRecord) {
      return next(ApiError.badRequest("–ü–æ–¥—Ä—è–¥—á–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω"));
    }

    const cleanedPhone = contractorRecord.phone.replace(/[^\d+]/g, "");
    const orderId = `order-${Date.now()}`;
    const amountInKopecks = Math.round(totalAmount * 100);

    const payload = {
      TerminalKey: TINKOFF_TERMINAL_KEY,
      Amount: amountInKopecks,
      OrderId: orderId,
      Description: `–û–ø–ª–∞—Ç–∞ —É—Å–ª—É–≥: ${contractor.name}`,
      CreateDealWithType: "NN", // —Å–æ–∑–¥–∞–µ–º —Å–¥–µ–ª–∫—É
      PaymentRecipientId: cleanedPhone,
      NotificationURL: `${process.env.BACKEND_URL}/api/payment/notification`, // ‚ö†Ô∏è –≤–∞–∂–Ω–æ!
      DATA: {
        companyAmount: Math.round(companyAmount * 100),
        contractorAmount: Math.round(contractorAmount * 100),
        commission: Math.round(commission * 100),
      },
    };

    payload.Token = createTinkoffToken(payload, TINKOFF_PASSWORD);

    console.log("[TINKOFF] Init Payload:", payload);

    const response = await axios.post(
      "https://rest-api-test.tinkoff.ru/v2/Init",
      payload,
      { headers: { "Content-Type": "application/json" } }
    );

    const data = response.data;
    console.log("[TINKOFF RESPONSE]", data);

    if (!data.Success) {
      console.error("[TINKOFF ERROR]", data);
      return res.status(400).json({ success: false, data });
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞—Ç–µ–∂
    const payment = await Payment.create({
      id: data.PaymentId,
      orderId,
      paymentUrl: data.PaymentURL,
      status: data.Status,
      contractorId: contractorRecord.id,
      commission,
      companyAmount,
      contractorAmount,
      totalAmount,
      items,
      responseData: data,
      dealId: null, // –±—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω –∏–∑ –Ω–æ—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    });

    console.log("[PAYMENT SAVED]", payment);

    return res.json({
      success: true,
      paymentUrl: data.PaymentURL,
      orderId,
      status: data.Status,
      paymentId: data.PaymentId,
    });
  } catch (err) {
    console.error("[TINKOFF EXCEPTION]", err.response?.data || err);
    return next(ApiError.internal("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç—ë–∂–Ω–æ–π —Å—Å—ã–ª–∫–∏"));
  }
}

// ========================================
// üì¨ 2. –û–ë–†–ê–ë–û–¢–ß–ò–ö –ù–û–¢–ò–§–ò–ö–ê–¶–ò–ô (WEBHOOK)
// ========================================
async function handleNotification(req, res, next) {
  try {
    const notification = req.body;
    console.log("[NOTIFICATION RECEIVED]", notification);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å
    const receivedToken = notification.Token;
    delete notification.Token;
    const expectedToken = createTinkoffToken(notification, TINKOFF_PASSWORD);

    if (receivedToken !== expectedToken) {
      console.error("[NOTIFICATION] Invalid token!");
      return res.status(400).send("Invalid token");
    }

    // –ù–∞—Ö–æ–¥–∏–º –ø–ª–∞—Ç–µ–∂
    const payment = await Payment.findByPk(notification.PaymentId);
    if (!payment) {
      console.error(
        "[NOTIFICATION] Payment not found:",
        notification.PaymentId
      );
      return res.status(404).send("Payment not found");
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
    payment.status = notification.Status;

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º DealId (SpAccumulationId) - –û–ù –û–ß–ï–ù–¨ –í–ê–ñ–ï–ù!
    if (notification.SpAccumulationId) {
      payment.dealId = notification.SpAccumulationId;
    }

    await payment.save();

    console.log("[NOTIFICATION] Payment updated:", payment.id, payment.status);

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å—ã
    switch (notification.Status) {
      case "AUTHORIZED":
        console.log("[NOTIFICATION] Payment authorized, confirming...");
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂
        await confirmPayment(payment);
        break;

      case "CONFIRMED":
        console.log("[NOTIFICATION] Payment confirmed, initiating payouts...");
        // –î–µ–ª–∞–µ–º –≤—ã–ø–ª–∞—Ç—ã
        await initiatePayouts(payment);
        break;

      case "REJECTED":
        console.error("[NOTIFICATION] Payment rejected!");
        break;
    }

    return res.send("OK");
  } catch (err) {
    console.error("[NOTIFICATION ERROR]", err);
    return res.status(500).send("Internal error");
  }
}

// ========================================
// ‚úÖ 3. –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï –ü–õ–ê–¢–ï–ñ–ê (Confirm)
// ========================================
async function confirmPayment(payment) {
  try {
    const payload = {
      TerminalKey: TINKOFF_TERMINAL_KEY,
      PaymentId: payment.id,
    };

    payload.Token = createTinkoffToken(payload, TINKOFF_PASSWORD);

    console.log("[CONFIRM] Payload:", payload);

    const response = await axios.post(
      "https://rest-api-test.tinkoff.ru/v2/Confirm",
      payload,
      { headers: { "Content-Type": "application/json" } }
    );

    console.log("[CONFIRM] Response:", response.data);

    if (response.data.Success) {
      payment.status = response.data.Status;
      await payment.save();
    }

    return response.data;
  } catch (err) {
    console.error("[CONFIRM ERROR]", err.response?.data || err);
    throw err;
  }
}

// ========================================
// üí∞ 4. –í–´–ü–õ–ê–¢–´ –ü–û–î–†–Ø–î–ß–ò–ö–£ –ò –ö–û–ú–ü–ê–ù–ò–ò
// ========================================
async function initiatePayouts(payment) {
  try {
    if (!payment.dealId) {
      throw new Error("DealId not found for payment: " + payment.id);
    }

    const contractor = await Contractors.findByPk(payment.contractorId);

    // 4.1 –í—ã–ø–ª–∞—Ç–∞ –ø–æ–¥—Ä—è–¥—á–∏–∫—É
    if (payment.contractorAmount > 0 && contractor.partnerId) {
      console.log("[PAYOUT] Initiating contractor payout...");
      await createPayout({
        dealId: payment.dealId,
        partnerId: contractor.partnerId, // ‚ö†Ô∏è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!
        amount: payment.contractorAmount,
        orderId: `payout-contractor-${payment.id}`,
        description: `–í—ã–ø–ª–∞—Ç–∞ –ø–æ–¥—Ä—è–¥—á–∏–∫—É ${contractor.name}`,
        isFinal: false,
        paymentId: payment.id,
        recipientType: "contractor",
      });
    }

    // 4.2 –í—ã–ø–ª–∞—Ç–∞ –∫–æ–º–ø–∞–Ω–∏–∏ (–æ—Å—Ç–∞—Ç–æ–∫)
    if (payment.companyAmount > 0) {
      console.log("[PAYOUT] Initiating company payout...");

      // ‚ö†Ô∏è –£ –≤–∞—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω PartnerId –¥–ª—è –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏
      const COMPANY_PARTNER_ID = process.env.COMPANY_PARTNER_ID || "";

      await createPayout({
        dealId: payment.dealId,
        partnerId: COMPANY_PARTNER_ID,
        amount: payment.companyAmount,
        orderId: `payout-company-${payment.id}`,
        description: "–í—ã–ø–ª–∞—Ç–∞ –∫–æ–º–ø–∞–Ω–∏–∏",
        isFinal: true, // –ü–û–°–õ–ï–î–ù–Ø–Ø –≤—ã–ø–ª–∞—Ç–∞ - –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–¥–µ–ª–∫—É!
        paymentId: payment.id,
        recipientType: "company",
      });
    }

    console.log("[PAYOUT] All payouts initiated successfully");
  } catch (err) {
    console.error("[PAYOUT ERROR]", err);
    throw err;
  }
}

// ========================================
// üí∏ 5. –°–û–ó–î–ê–ù–ò–ï –í–´–ü–õ–ê–¢–´ (Init E2C)
// ========================================
async function createPayout(options) {
  try {
    const {
      dealId,
      partnerId,
      amount,
      orderId,
      description,
      isFinal,
      paymentId,
      recipientType,
    } = options;

    const amountInKopecks = Math.round(amount * 100);

    const payload = {
      TerminalKey: TINKOFF_TERMINAL_KEY_E2C, // ‚ö†Ô∏è —Ç–µ—Ä–º–∏–Ω–∞–ª –í–´–ü–õ–ê–¢!
      OrderId: orderId,
      Amount: amountInKopecks,
      PartnerId: partnerId, // ID –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–∞—Ä—Ç–Ω–µ—Ä–∞
      DealId: dealId,
      FinalPayout: isFinal,
      PaymentRecipientId: partnerId, // –º–æ–∂–Ω–æ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å
    };

    payload.Token = createTinkoffToken(payload, TINKOFF_PASSWORD);

    console.log("[PAYOUT INIT] Payload:", payload);

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—ã–ø–ª–∞—Ç—ã
    const initResponse = await axios.post(
      "https://rest-api-test.tinkoff.ru/e2c/v2/Init",
      payload,
      { headers: { "Content-Type": "application/json" } }
    );

    console.log("[PAYOUT INIT] Response:", initResponse.data);

    if (!initResponse.data.Success) {
      throw new Error(
        "Payout init failed: " + JSON.stringify(initResponse.data)
      );
    }

    const payoutPaymentId = initResponse.data.PaymentId;

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    const payout = await Payout.create({
      id: payoutPaymentId,
      paymentId,
      orderId,
      amount,
      status: initResponse.data.Status,
      recipientType,
      partnerId,
      dealId,
      isFinal,
    });

    // –í—ã–ø–æ–ª–Ω—è–µ–º –≤—ã–ø–ª–∞—Ç—É
    await executePayoutPayment(payoutPaymentId);

    return payout;
  } catch (err) {
    console.error("[PAYOUT");
  }
}
